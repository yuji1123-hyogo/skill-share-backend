paths:
  /auth/register:
    post:
      summary: "ユーザー登録"
      description: "新しいユーザーアカウントを作成します。"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRegisterRequest"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
  
  /auth/login:
    post:
      summary: "ユーザーログイン"
      description: "メールアドレスとパスワードでログインし、JWTトークンを取得します。"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginRequest"
      responses:
        "200":
          description: "ログイン成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ログイン成功"
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsIn..."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/logout:
    post:
      summary: "ユーザーログアウト"
      description: "ログアウト処理を行い、JWTトークンを無効化します。"
      tags:
        - Authentication
      responses:
        "200":
          $ref: "#/components/responses/Success"

  /auth/check-email:
    get:
      summary: "メールアドレスの存在確認"
      description: "指定されたメールアドレスが既に登録されているかを確認します。"
      tags:
        - Authentication
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
            example: "example@email.com"
      responses:
        "200":
          description: "メールアドレスの存在確認結果"
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"

  /auth/check-username:
    get:
      summary: "ユーザー名の存在確認"
      description: "指定されたユーザー名が既に登録されているかを確認します。"
      tags:
        - Authentication
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            example: "john_doe"
      responses:
        "200":
          description: "ユーザー名の存在確認結果"
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    AuthRegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "mypassword123"

    AuthLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "mypassword123"

  responses:
    Success:
      description: "リクエスト成功"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "操作が成功しました"

    Created:
      description: "リソース作成成功"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "リソースが作成されました"

    BadRequest:
      description: "バリデーションエラーまたはリクエストエラー"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "リクエストが無効です"
              errors:
                type: array
                items:
                  type: string
                example:
                  - "メールアドレスは必須です"
                  - "パスワードは3文字以上にしてください"

    Unauthorized:
      description: "認証エラー"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "認証が必要です"
